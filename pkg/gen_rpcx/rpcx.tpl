// Code generated by {{.ToolName}} {{.Version}}. DO NOT EDIT.
package {{.Package}}{{$PkgCtrl := .PkgCtrl}}

$Import-Packages$

const ({{range $i,$svc := .Services}}{{$Name := $svc.Name}}
	{{$Name}}ServerName = "{{$Name}}"{{end}}
)

////////////////////////////////////////////////////////////////////////////////
// public interface

{{range $i,$svc := .Services}}{{$Name := $svc.Name}}{{$methods := $svc.Methods}}
type {{$Name}}Server interface {
{{range $i,$method := $methods}}
	{{Doc $method.Doc}}{{$method.Name}}(ctx context.Context, rq *{{$method.RQ}}, rs *{{$method.RS}}) (err error){{end}}
}


type {{$Name}}Client interface {
{{range $i,$method := $methods}}
	{{$method.Name}}(ctx context.Context, rq *{{$method.RQ}}) (rs *{{$method.RS}}, err error){{end}}
}


func Register{{$Name}}ServerEntity(svc {{$PkgCtrl}}.Registry,impl {{$Name}}Server) {
	svc.RegisterEntity(&x{{$Name}}Server{impl:impl})
}

func New{{$Name}}XClient(xclient rpcx_client.XClient) *{{$Name}}XClient {
	return &{{$Name}}XClient{xclient: xclient}
}

func New{{$Name}}OneClient(oneclient *rpcx_client.OneClient) *{{$Name}}OneClient {
	return &{{$Name}}OneClient{oneclient: oneclient}
}
{{end}}

////////////////////////////////////////////////////////////////////////////////
// service

{{range $i,$svc := .Services}}{{$Name := $svc.Name}}{{$methods := $svc.Methods}}
type x{{$Name}}Server struct {
	impl {{$Name}}Server
	ctrl {{$PkgCtrl}}.ServerControl
}
func (x *x{{$Name}}Server) ServiceName() string {
	return {{$Name}}ServerName
}

func (x *x{{$Name}}Server) RegisterHandlers(ctrl {{$PkgCtrl}}.ServerControl, server *rpcx_server.Server) {
	x.ctrl = ctrl{{ range $i,$method := $methods}}
	ctrl.AddHandler({{$Name}}ServerName, "{{$method.Name}}", x.{{$method.Name}}){{end}}
}

{{range $i,$method := $methods}}
func (x *x{{$Name}}Server){{$method.Name}}(sctx *rpcx_server.Context) (err error){
	var rq {{$method.RQ}}
	var rs {{$method.RS}}
	err = sctx.Bind(&rq)
	if err != nil {
		if log := x.ctrl.Logger().Error(); log.Enabled() {
			log.Str("service", {{$Name}}ServerName).
				Str("method", "{{$method.Name}}").Err(err).Msg("unmarshal failed")
			return
		}
	}
	ctx,cancel := x.ctrl.WithContext(sctx)
	defer cancel()
	err = x.impl.{{$method.Name}}(ctx, &rq, &rs)
	if err != nil {
		if log := x.ctrl.Logger().Trace(); log.Enabled() {
			log.Str("service", {{$Name}}ServerName).
				Str("method", "{{$method.Name}}").Err(err).Msg("unmarshal failed")
		}
		return
	}
	return sctx.Write(&rs)
}{{end}}

{{end}}

////////////////////////////////////////////////////////////////////////////////
// XClient

{{range $i,$svc := .Services}}{{$Name := $svc.Name}}{{$methods := $svc.Methods}}
type {{$Name}}XClient struct {
	xclient rpcx_client.XClient
}

var _ {{$Name}}Client = (*{{$Name}}XClient)(nil)


{{range $i,$method := $methods}}
func(c *{{$Name}}XClient){{$method.Name}}(ctx context.Context, rq *{{$method.RQ}}) (rs *{{$method.RS}}, err error){
	rs = &{{$method.RS}}{}
	err = c.xclient.Call(ctx, "{{$method.Name}}", rq, rs)
	return
}{{end}}

{{end}}

////////////////////////////////////////////////////////////////////////////////
// OneClient

{{range $i,$svc := .Services}}{{$Name := $svc.Name}}{{$methods := $svc.Methods}}
type {{$Name}}OneClient struct {
	oneclient *rpcx_client.OneClient
}

var _ {{$Name}}Client = (*{{$Name}}OneClient)(nil)

{{range $i,$method := $methods}}
func(c *{{$Name}}OneClient){{$method.Name}}(ctx context.Context, rq *{{$method.RQ}}) (rs *{{$method.RS}}, err error){
	rs = &{{$method.RS}}{}
	err = c.oneclient.Call(ctx,{{$Name}}ServerName, "{{$method.Name}}", rq, rs)
	return
}{{end}}

{{end}}