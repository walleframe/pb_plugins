// Code generated by {{.ToolName}} {{.Version}}. DO NOT EDIT.{{$svc := .Stub}}{{$Name := $svc.Name}}{{$methods := $svc.Methods}} {{$PkgGin := .PkgGin}}{{$Package := .Package}}
package {{$svc.StubGin}}

$Import-Packages$

{{if $svc.GenApi}}
const ({{range $i,$method := $methods}}
	Method{{$method.Name}}Path = "{{$method.ApiPath}}"{{end}}
)
{{end}}
// 此函数必须要在svc_gin.RegisterGinRouter的函数内调用.
func New{{$Name}}GinHandler(impl {{$Package}}.{{$Name}}Server) *{{$Name}}GinHandler {
	x := &{{$Name}}GinHandler{
		impl: impl,
		ctrl: {{$svc.StubCtrl}}.GetServerControl(),
	}
	return x
}

type {{$Name}}GinHandler struct {
	impl {{$Package}}.{{$Name}}Server
	ctrl {{$svc.StubCtrl}}.ServerControl
}

func (x *{{$Name}}GinHandler) ServiceName() string {
	return {{$Package}}.{{$Name}}ServerName
}


{{range $i,$method := $methods}}{{if $method.AppRQ}}
func (x *{{$Name}}GinHandler){{$method.Name}}(c *gin.Context) {
	var rs {{$method.RS}}
	rq := x.ctrl.GetAppInfo(c)
	ctx,cancel := x.ctrl.WithContext(c)
	defer cancel()
	err := x.impl.{{$method.Name}}(ctx, rq, &rs)
	if err != nil {
		if log := x.ctrl.Logger().Trace(); log.Enabled() {
			log.Str("service", {{$Package}}.{{$Name}}ServerName).
				Str("method", "{{$method.Name}}").Err(err).Msg("unmarshal failed")
		}
		x.ctrl.Output().OutputRPCError(c, err)
		return
	}
	x.ctrl.Output().OutputSuccess(c, &rs)
}{{else}}
func (x *{{$Name}}GinHandler){{$method.Name}}(c *gin.Context) {
	var rq {{$method.RQ}}
	var rs {{$method.RS}}
	err := c.Bind(&rq)
	if err != nil {
		if log := x.ctrl.Logger().Error(); log.Enabled() {
			log.Str("service", {{$Package}}.{{$Name}}ServerName).
				Str("method", "{{$method.Name}}").Err(err).Msg("unmarshal failed")
			x.ctrl.Output().OutputFailure(c, 400, err.Error()) // 400=> defs.ErrBadRequest
			return
		}
	}
	{{if $method.AppInfo}}rq.AppInfo = x.ctrl.GetAppInfo(c){{end}}
	ctx,cancel := x.ctrl.WithContext(c)
	defer cancel()
	err = x.impl.{{$method.Name}}(ctx, &rq, &rs)
	if err != nil {
		if log := x.ctrl.Logger().Trace(); log.Enabled() {
			log.Str("service", {{$Package}}.{{$Name}}ServerName).
				Str("method", "{{$method.Name}}").Err(err).Msg("unmarshal failed")
		}
		x.ctrl.Output().OutputRPCError(c, err)
		return
	}
	x.ctrl.Output().OutputSuccess(c, &rs)
}{{end}}{{end}}

{{if $svc.GenApi}}

type ApiWrapper struct {
	handler *{{$Name}}GinHandler
	r *gin.Engine
}
// 此函数必须要在svc_gin.RegisterGinRouter的函数内调用.
func GinApiWrap(r *gin.Engine, impl {{$Package}}.{{$Name}}Server, wrap func(wrap *ApiWrapper)) {
	x := &ApiWrapper{
		handler: New{{$Name}}GinHandler(impl),
		r:r,
	} {{- range $i,$method := $methods}}
	// wrap.{{$method.Name}}(){{end}}
	wrap(x)
	return
}

func (x *ApiWrapper) Handler() *{{$Name}}GinHandler {
	return x.handler
}

{{range $i,$method := $methods}}
func (x *ApiWrapper){{$method.Name}}(handlers ...gin.HandlerFunc) {
	x.r.{{$method.ApiMethod}}(Method{{$method.Name}}Path, append(handlers, x.handler.{{$method.Name}})...)
}
{{end}}

{{end}}
